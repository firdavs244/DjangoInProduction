version: '3.8'

services:
  # Django
  web:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    container_name: django_web
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    env_file:
      - .env.prod
    depends_on:
      - db
      - redis
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: django_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available:/etc/nginx/sites-available:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    networks:
      - app-network
    restart: unless-stopped

  # PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: django_postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: md5
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis cache and session storage
  redis:
    image: redis:7-alpine
    container_name: django_redis
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery worker
  celery:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    container_name: django_celery
    command: celery -A myproject worker -l info --concurrency=2
    volumes:
      - media_volume:/app/media
    env_file:
      - .env.prod
    depends_on:
      - db
      - redis
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "-A", "myproject", "inspect", "ping"]
      interval: 60s
      timeout: 30s
      retries: 3

  # Celery beat scheduler
  celery-beat:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    container_name: django_celery_beat
    command: celery -A myproject beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - celery_beat_data:/app/celerybeat-schedule
    env_file:
      - .env.prod
    depends_on:
      - db
      - redis
    networks:
      - app-network
    restart: unless-stopped

  # Monitoring - Flower (Celery monitoring)
  flower:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    container_name: django_flower
    command: celery -A myproject flower --port=5555
    ports:
      - "5555:5555"
    env_file:
      - .env.prod
    depends_on:
      - celery
      - redis
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  celery_beat_data:
    driver: local